const express = require('express');
const router = express.Router();
const Joi = require('joi');
const mongoose = require('mongoose');

// üëâ G·ªôp lu√¥n schema ·ªü ƒë√¢y
const userSchema = new mongoose.Schema({
    idUser: { type: String, required: true, unique: true },
    ho: { type: String, required: true },
    ten: { type: String, required: true },
    tenTaiKhoan: { type: String, required: true, unique: true },
    matKhau: { type: String, required: true },
    sdt: { type: String, required: true },
    ngayTao: { type: Date, default: Date.now },
    diemTichLuy: { type: Number, default: 0 }
});

// ‚úÖ Fix l·ªói OverwriteModelError:
const User = mongoose.models.User || mongoose.model('User', userSchema);

// üëâ API ƒêƒÉng nh·∫≠p
router.post('/login', async (req, res) => {
    const schema = Joi.object({
        tenTaiKhoan: Joi.string().required(),
        matKhau: Joi.string().required()
    });
    const { error } = schema.validate(req.body);
    if (error) return res.status(400).json({ message: error.details[0].message });

    try {
        const user = await User.findOne({
            tenTaiKhoan: req.body.tenTaiKhoan,
            matKhau: req.body.matKhau // üëà n√™n hash ·ªü th·ª±c t·∫ø nh√©

        });

        if (!user) return res.status(401).json({ message: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u" });
        res.status(200).json({
            message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
            idUser: user.idUser, // Ch·ªâ c·∫ßn tr·∫£ v·ªÅ idUser thay v√¨ to√†n b·ªô user
        });
        // res.status(200).json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", user });
        // res.redirect('http://localhost:3000/index.html');
    } catch (err) {
        res.status(500).json({ message: "L·ªói server", error: err });
    }
    console.log("‚úÖ D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", req.body); // Th√™m d√≤ng n√†y
});



// ƒê·ªãnh nghƒ©a schema cho Counter 
const counterSchema = new mongoose.Schema({
    _id: { type: String, required: true }, // V√≠ d·ª•: 'userId'
    seq: { type: Number, default: 0 }
});
const Counter = mongoose.models.Counter || mongoose.model('Counter', counterSchema);

// H√†m t·∫°o idUser t·ª± ƒë·ªông 
async function getNextUserId() {
    const counter = await Counter.findOneAndUpdate(
        { _id: 'userId' },
        { $inc: { seq: 1 } },
        { new: true, upsert: true }
    );
    return `U${String(counter.seq).padStart(3, '0')}`;
}

// Joi schema cho ƒëƒÉng k√Ω
const registerSchema = Joi.object({
    ho: Joi.string()
        .required()
        .pattern(/^[A-Z][a-zA-Z]*$/)
        .messages({
            "string.pattern.base": "H·ªç ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ c√°i vi·∫øt hoa v√† ch·ªâ ch·ª©a ch·ªØ c√°i",
            "any.required": "H·ªç l√† tr∆∞·ªùng b·∫Øt bu·ªôc"
        }),

    ten: Joi.string()
        .required()
        .pattern(/^[A-Z][a-zA-Z]*$/)
        .messages({
            "string.pattern.base": "T√™n ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ c√°i vi·∫øt hoa v√† ch·ªâ ch·ª©a ch·ªØ c√°i",
            "any.required": "T√™n l√† tr∆∞·ªùng b·∫Øt bu·ªôc"
        }),

    tenTaiKhoan: Joi.string()
        .required()
        .min(4)
        .messages({
            "string.empty": "T√™n t√†i kho·∫£n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng",
            "string.min": "T√™n t√†i kho·∫£n ph·∫£i c√≥ √≠t nh·∫•t 4 k√Ω t·ª±",
            "any.required": "T√™n t√†i kho·∫£n l√† tr∆∞·ªùng b·∫Øt bu·ªôc"
        }),

    matKhau: Joi.string()
        .required()
        .min(8)
        .pattern(/^(?=.*[A-Z])(?=.*\d)/)
        .messages({
            "string.min": "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±",
            "string.pattern.base": "M·∫≠t kh·∫©u ph·∫£i bao g·ªìm √≠t nh·∫•t 1 ch·ªØ c√°i vi·∫øt hoa v√† 1 s·ªë",
            "any.required": "M·∫≠t kh·∫©u l√† tr∆∞·ªùng b·∫Øt bu·ªôc"
        }),

    sdt: Joi.string()
        .required()
        .pattern(/^(09|07|08)\d{8}$/)
        .messages({
            "string.pattern.base": "S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 09, 07 ho·∫∑c 08 v√† c√≥ 10 ch·ªØ s·ªë",
            "any.required": "S·ªë ƒëi·ªán tho·∫°i l√† tr∆∞·ªùng b·∫Øt bu·ªôc"
        })
});

// ƒëƒÉng k√Ω t√†i kho·∫£n 
router.post('/register', async (req, res) => {
    try {
        // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
        const { error } = registerSchema.validate(req.body);
        if (error) {
            return res.status(400).json({
                message: error.details.map(detail => detail.message).join(', ')
            });
        }

        // Ki·ªÉm tra tr√πng t√™n t√†i kho·∫£n
        const existingUser = await User.findOne({ tenTaiKhoan: req.body.tenTaiKhoan });
        if (existingUser) {
            return res.status(400).json({
                message: "T√™n t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i"
            });
        }

        // T·∫°o ID t·ª± ƒë·ªông cho ng∆∞·ªùi d√πng m·ªõi
        const idUser = await getNextUserId();
        const user = new User({
            ...req.body,
            idUser: idUser
        });

        await user.save();

        return res.status(201).json({
            message: "T·∫°o t√†i kho·∫£n th√†nh c√¥ng",
            user: user
        });

    } catch (err) {
        console.error("L·ªói khi t·∫°o t√†i kho·∫£n:", err);
        return res.status(500).json({
            message: "L·ªói server",
            error: err.message
        });
    }
});

router.get('/ranking', async (req, res) => {
    try {
        const users = await User.find({}, {
            _id: 0, ho: 1, ten: 1, sdt: 1, diemTichLuy: 1
        }).sort({ diemTichLuy: -1 });

        res.json(users);
    } catch (error) {
        console.error("L·ªói khi l·∫•y b·∫£ng x·∫øp h·∫°ng:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
});

router.get('/:idUser', async (req, res) => {
    const { idUser } = req.params;  // L·∫•y idUser t·ª´ URL

    try {
        const user = await User.findOne({ idUser });

        if (!user) {
            return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
        }

        // Tr·∫£ v·ªÅ d·ªØ li·ªáu ng∆∞·ªùi d√πng n·∫øu t√¨m th·∫•y
        res.json({
            idUser: user.idUser,
            ho: user.ho,
            ten: user.ten,
            tenTaiKhoan: user.tenTaiKhoan,
            sdt: user.sdt,
            ngayTao: user.ngayTao,
            diemTichLuy: user.diemTichLuy

        });
    } catch (error) {
        console.error('L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', error);
        res.status(500).json({ message: 'L·ªói h·ªá th·ªëng' });
    }
});


// API C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng (PUT)
router.put('/update/:idUser', async (req, res) => {
    const { idUser } = req.params;

    // X√°c ƒë·ªãnh schema update v·ªõi validation cho c√°c tr∆∞·ªùng
    const updateSchema = Joi.object({
        ho: Joi.string()
            .optional()
            .pattern(/^[A-Z][a-zA-Z]*$/) // Ch·ªØ c√°i ƒë·∫ßu vi·∫øt hoa
            .messages({
                "string.pattern.base": "H·ªç ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ c√°i vi·∫øt hoa v√† ch·ªâ ch·ª©a ch·ªØ c√°i"
            }),

        ten: Joi.string()
            .optional()
            .pattern(/^[A-Z][a-zA-Z]*$/) // Ch·ªØ c√°i ƒë·∫ßu vi·∫øt hoa
            .messages({
                "string.pattern.base": "T√™n ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ c√°i vi·∫øt hoa v√† ch·ªâ ch·ª©a ch·ªØ c√°i"
            }),

        tenTaiKhoan: Joi.string()
            .optional()
            .messages({
                "string.empty": "T√™n t√†i kho·∫£n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
            }),

        matKhau: Joi.string()
            .optional()
            .min(8) // √çt nh·∫•t 8 k√Ω t·ª±
            .pattern(/^(?=.*[A-Z])(?=.*\d)/) // √çt nh·∫•t 1 ch·ªØ vi·∫øt hoa v√† 1 s·ªë
            .messages({
                "string.min": "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±",
                "string.pattern.base": "M·∫≠t kh·∫©u ph·∫£i bao g·ªìm √≠t nh·∫•t 1 ch·ªØ c√°i vi·∫øt hoa v√† 1 s·ªë"
            }),

        sdt: Joi.string()
            .optional()
            .pattern(/^(09|07|08)\d{8}$/) // S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu v·ªõi 09, 07, ho·∫∑c 08 v√† c√≥ 10 k√Ω t·ª±
            .messages({
                "string.pattern.base": "S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 09, 07 ho·∫∑c 08 v√† c√≥ 10 k√Ω t·ª±"
            })
    });

    // Validate d·ªØ li·ªáu t·ª´ client
    const { error } = updateSchema.validate(req.body);
    if (error) {
        return res.status(400).json({ message: error.details.map(d => d.message).join(', ') });
    }

    try {
        // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
        const user = await User.findOneAndUpdate(
            { idUser },
            { $set: req.body }, // C·∫≠p nh·∫≠t d·ªØ li·ªáu ng∆∞·ªùi d√πng
            { new: true } // Tr·∫£ v·ªÅ document m·ªõi sau khi update
        );

        if (!user) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t' });
        }

        res.status(200).json({
            message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng',
            user
        });
    } catch (err) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:', err);
        res.status(500).json({ message: 'L·ªói server', error: err.message });
    }
});






module.exports = router;
