const express = require('express');
const router = express.Router();
const Joi = require('joi');
const mongoose = require('mongoose');

// üëâ G·ªôp lu√¥n schema ·ªü ƒë√¢y
const userSchema = new mongoose.Schema({
    idUser: { type: String, required: true, unique: true },
    ho: { type: String, required: true },
    ten: { type: String, required: true },
    tenTaiKhoan: { type: String, required: true, unique: true },
    matKhau: { type: String, required: true },
    sdt: { type: String, required: true },
    ngayTao: { type: Date, default: Date.now },
    diemTichLuy: { type: Number, default: 0 }
});

// ‚úÖ Fix l·ªói OverwriteModelError:
const User = mongoose.models.User || mongoose.model('User', userSchema);

// üëâ API ƒêƒÉng nh·∫≠p
router.post('/login', async (req, res) => {
    const schema = Joi.object({
        tenTaiKhoan: Joi.string().required(),
        matKhau: Joi.string().required()
    });

    const { error } = schema.validate(req.body);
    if (error) return res.status(400).json({ message: error.details[0].message });

    try {
        // D√πng .lean() ƒë·ªÉ l·∫•y plain object
        const user = await User.findOne({
            tenTaiKhoan: req.body.tenTaiKhoan,
            matKhau: req.body.matKhau
        }).lean(); // üëà TH√äM D√íNG N√ÄY

        if (!user) {
            console.log("‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi t√†i kho·∫£n:", req.body.tenTaiKhoan);
            return res.status(401).json({ message: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u" });
        }

        console.log("‚úÖ User t√¨m th·∫•y:", user);
        console.log("üëâ idUser:", user.idUser); // Gi·ªù s·∫Ω kh√¥ng undefined n·ªØa

        return res.status(200).json({
            message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
            idUser: user.idUser
        });

    } catch (err) {
        console.error("‚ùå L·ªói server:", err);
        return res.status(500).json({ message: "L·ªói server", error: err.message });
    }
});






const schema = Joi.object({
    ho: Joi.string().required().messages({
        "any.required": "H·ªç l√† b·∫Øt bu·ªôc",
        "string.empty": "H·ªç kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
    }),
    ten: Joi.string().required().messages({
        "any.required": "T√™n l√† b·∫Øt bu·ªôc",
        "string.empty": "T√™n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
    }),
    tenTaiKhoan: Joi.string().required().messages({
        "any.required": "T√™n t√†i kho·∫£n l√† b·∫Øt bu·ªôc",
        "string.empty": "T√™n t√†i kho·∫£n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
    }),
    matKhau: Joi.string().required().messages({
        "any.required": "M·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc",
        "string.empty": "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
    }),
    sdt: Joi.string().required().messages({
        "any.required": "S·ªë ƒëi·ªán tho·∫°i l√† b·∫Øt bu·ªôc",
        "string.empty": "S·ªë ƒëi·ªán tho·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
    })
});

// ƒê·ªãnh nghƒ©a schema cho Counter trong c√πng file Router
const counterSchema = new mongoose.Schema({
    _id: { type: String, required: true }, // ƒê·ªãnh danh b·ªô ƒë·∫øm, v√≠ d·ª•: 'userId'
    seq: { type: Number, default: 0 } // Gi√° tr·ªã b·ªô ƒë·∫øm
});
const Counter = mongoose.models.Counter || mongoose.model('Counter', counterSchema);

async function getNextUserId() {
    const counter = await Counter.findOneAndUpdate(
        { _id: 'userId' },  // S·ª≠ d·ª•ng _id ƒë·ªÉ x√°c ƒë·ªãnh b·ªô ƒë·∫øm
        { $inc: { seq: 1 } }, // TƒÉng b·ªô ƒë·∫øm l√™n 1
        { new: true, upsert: true }  // T·∫°o m·ªõi n·∫øu kh√¥ng t·ªìn t·∫°i
    );
    return `U${String(counter.seq).padStart(3, '0')}`; // Tr·∫£ v·ªÅ ID theo ƒë·ªãnh d·∫°ng "U001"
}

router.post('/register', async (req, res) => {
    try {
        // Validate d·ªØ li·ªáu ƒë·∫ßu v√†o
        const { error } = schema.validate(req.body);
        if (error) {
            // Tr·∫£ v·ªÅ l·ªói v·ªõi th√¥ng b√°o chi ti·∫øt c·ªßa t·ª´ng tr∆∞·ªùng
            return res.status(400).json({
                message: error.details.map(detail => detail.message).join(', ') // Tr·∫£ v·ªÅ t·∫•t c·∫£ l·ªói n·∫øu c√≥
            });
        }

        // Ki·ªÉm tra xem t√™n t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i ch∆∞a
        const existingUser = await User.findOne({ tenTaiKhoan: req.body.tenTaiKhoan });
        if (existingUser) {
            return res.status(400).json({
                message: "T√™n t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i"
            });
        }
        //t·∫°o ID t·ª± ƒë·ªông cho ng∆∞·ªùi d√πng m·ªõi
        const idUser = await getNextUserId();
        const user = new User({
            ...req.body,
            idUser: idUser
        });
        if (!user) {
            return res.status(400).json({ message: "T·∫°o t√†i kho·∫£n th·∫•t b·∫°i" });
        }
        // L∆∞u ng∆∞·ªùi d√πng v√†o c∆° s·ªü d·ªØ li·ªáu
        await user.save();

        // Th√†nh c√¥ng, tr·∫£ v·ªÅ th√¥ng b√°o
        return res.status(201).json({
            message: "T·∫°o t√†i kho·∫£n th√†nh c√¥ng",
            user: user
        });

    } catch (err) {
        console.error("L·ªói khi t·∫°o t√†i kho·∫£n:", err);
        return res.status(500).json({
            message: "L·ªói server",
            error: err.message
        });
    }
});

// GET th√¥ng tin ng∆∞·ªùi d√πng theo idUser
router.get('/:idUser', async (req, res) => {
    try {
        const { idUser } = req.params;
        const user = await User.findOne({ idUser }).lean(); // Tr·∫£ v·ªÅ plain object

        if (!user) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });
        }

        // Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng
        res.status(200).json(user);
    } catch (err) {
        console.error('L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', err);
        res.status(500).json({ message: 'L·ªói server', error: err.message });
    }
});


// API C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng (PUT)
router.put('/update/:idUser', async (req, res) => {
    const { idUser } = req.params;

    // X√°c ƒë·ªãnh schema update v·ªõi validation cho c√°c tr∆∞·ªùng
    const updateSchema = Joi.object({
        ho: Joi.string()
            .optional()
            .pattern(/^[A-Z][a-zA-Z]*$/) // Ch·ªØ c√°i ƒë·∫ßu vi·∫øt hoa
            .messages({
                "string.pattern.base": "H·ªç ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ c√°i vi·∫øt hoa v√† ch·ªâ ch·ª©a ch·ªØ c√°i"
            }),

        ten: Joi.string()
            .optional()
            .pattern(/^[A-Z][a-zA-Z]*$/) // Ch·ªØ c√°i ƒë·∫ßu vi·∫øt hoa
            .messages({
                "string.pattern.base": "T√™n ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng ch·ªØ c√°i vi·∫øt hoa v√† ch·ªâ ch·ª©a ch·ªØ c√°i"
            }),

        tenTaiKhoan: Joi.string()
            .optional()
            .messages({
                "string.empty": "T√™n t√†i kho·∫£n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"
            }),

        matKhau: Joi.string()
            .optional()
            .min(8) // √çt nh·∫•t 8 k√Ω t·ª±
            .pattern(/^(?=.*[A-Z])(?=.*\d)/) // √çt nh·∫•t 1 ch·ªØ vi·∫øt hoa v√† 1 s·ªë
            .messages({
                "string.min": "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±",
                "string.pattern.base": "M·∫≠t kh·∫©u ph·∫£i bao g·ªìm √≠t nh·∫•t 1 ch·ªØ c√°i vi·∫øt hoa v√† 1 s·ªë"
            }),

        sdt: Joi.string()
            .optional()
            .pattern(/^(09|07|08)\d{8}$/) // S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu v·ªõi 09, 07, ho·∫∑c 08 v√† c√≥ 10 k√Ω t·ª±
            .messages({
                "string.pattern.base": "S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 09, 07 ho·∫∑c 08 v√† c√≥ 10 k√Ω t·ª±"
            })
    });

    // Validate d·ªØ li·ªáu t·ª´ client
    const { error } = updateSchema.validate(req.body);
    if (error) {
        return res.status(400).json({ message: error.details.map(d => d.message).join(', ') });
    }

    try {
        // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
        const user = await User.findOneAndUpdate(
            { idUser },
            { $set: req.body }, // C·∫≠p nh·∫≠t d·ªØ li·ªáu ng∆∞·ªùi d√πng
            { new: true } // Tr·∫£ v·ªÅ document m·ªõi sau khi update
        );

        if (!user) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒë·ªÉ c·∫≠p nh·∫≠t' });
        }

        res.status(200).json({
            message: 'C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng',
            user
        });
    } catch (err) {
        console.error('L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:', err);
        res.status(500).json({ message: 'L·ªói server', error: err.message });
    }
});





module.exports = router;
